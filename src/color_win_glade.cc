// generated 2006/4/13 13:56:33 PDT by benjie@paddy.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/benjie/projects/cheech/cheech.glade
// for gtk 2.8.6 and gtkmm 2.8.0
//
// Please modify the corresponding derived classes in ./src/color_win.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
//#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "color_win_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/table.h>
#include <gtkmm/alignment.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include <gtkmm/box.h>
#include <gtkmm/buttonbox.h>

color_win_glade::color_win_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{

   Gtk::Window *color_win = this;
   gmm_data = new GlademmData(get_accel_group());
   change_label = Gtk::manage(new class Gtk::Label(_("<b> %1 is already using %2.\n"
		"Please choose a differnt color.</b>")));

   Gtk::RadioButton::Group _RadioBGroup_orange;
   orange = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Orange")));
   yellow = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Yellow")));
   white = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("White")));
   blue = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Blue")));
   purple = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Purple")));
   black = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Black")));
   red = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Red")));
   green = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_orange, _("Green")));

   Gtk::Table *table7 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Alignment *alignment12 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 1, 1));
   Gtk::Label *label29 = Gtk::manage(new class Gtk::Label(_("<b>Color</b>")));
   Gtk::Frame *frame9 = Gtk::manage(new class Gtk::Frame());
   Gtk::Button *color_cancel_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Image *image14 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-apply"), Gtk::IconSize(4)));
   Gtk::Label *label39 = Gtk::manage(new class Gtk::Label(_("Change Color")));
   Gtk::HBox *hbox5 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment14 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *change_button = Gtk::manage(new class Gtk::Button());
   Gtk::HButtonBox *hbuttonbox7 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 6));
   Gtk::VBox *vbox10 = Gtk::manage(new class Gtk::VBox(false, 6));
   change_label->set_alignment(0.5,0.5);
   change_label->set_padding(0,0);
   change_label->set_justify(Gtk::JUSTIFY_CENTER);
   change_label->set_line_wrap(false);
   change_label->set_use_markup(true);
   change_label->set_selectable(false);
   orange->set_flags(Gtk::CAN_FOCUS);
   orange->set_relief(Gtk::RELIEF_NORMAL);
   orange->set_mode(true);
   orange->set_active(false);
   yellow->set_flags(Gtk::CAN_FOCUS);
   yellow->set_relief(Gtk::RELIEF_NORMAL);
   yellow->set_mode(true);
   yellow->set_active(false);
   white->set_flags(Gtk::CAN_FOCUS);
   white->set_relief(Gtk::RELIEF_NORMAL);
   white->set_mode(true);
   white->set_active(false);
   blue->set_flags(Gtk::CAN_FOCUS);
   blue->set_relief(Gtk::RELIEF_NORMAL);
   blue->set_mode(true);
   blue->set_active(false);
   purple->set_flags(Gtk::CAN_FOCUS);
   purple->set_relief(Gtk::RELIEF_NORMAL);
   purple->set_mode(true);
   purple->set_active(false);
   black->set_flags(Gtk::CAN_FOCUS);
   black->set_relief(Gtk::RELIEF_NORMAL);
   black->set_mode(true);
   black->set_active(false);
   red->set_flags(Gtk::CAN_FOCUS);
   red->set_relief(Gtk::RELIEF_NORMAL);
   red->set_mode(true);
   red->set_active(true);
   green->set_flags(Gtk::CAN_FOCUS);
   green->set_relief(Gtk::RELIEF_NORMAL);
   green->set_mode(true);
   green->set_active(false);
   table7->set_row_spacings(0);
   table7->set_col_spacings(0);
   table7->attach(*orange, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*yellow, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*white, 3, 4, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*blue, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*purple, 1, 2, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*black, 2, 3, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*red, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table7->attach(*green, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   alignment12->add(*table7);
   label29->set_alignment(0.5,0.5);
   label29->set_padding(0,0);
   label29->set_justify(Gtk::JUSTIFY_LEFT);
   label29->set_line_wrap(false);
   label29->set_use_markup(true);
   label29->set_selectable(false);
   frame9->set_border_width(3);
   frame9->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame9->set_label_align(0,0.5);
   frame9->add(*alignment12);
   frame9->set_label_widget(*label29);
   color_cancel_button->set_flags(Gtk::CAN_FOCUS);
   color_cancel_button->set_flags(Gtk::CAN_DEFAULT);
   color_cancel_button->set_relief(Gtk::RELIEF_NORMAL);
   image14->set_alignment(0.5,0.5);
   image14->set_padding(0,0);
   label39->set_alignment(0.5,0.5);
   label39->set_padding(0,0);
   label39->set_justify(Gtk::JUSTIFY_LEFT);
   label39->set_line_wrap(false);
   label39->set_use_markup(false);
   label39->set_selectable(false);
   hbox5->pack_start(*image14, Gtk::PACK_SHRINK, 0);
   hbox5->pack_start(*label39, Gtk::PACK_SHRINK, 0);
   alignment14->add(*hbox5);
   change_button->set_flags(Gtk::CAN_FOCUS);
   change_button->set_flags(Gtk::CAN_DEFAULT);
   change_button->set_relief(Gtk::RELIEF_NORMAL);
   change_button->add(*alignment14);
   hbuttonbox7->set_border_width(6);
   hbuttonbox7->pack_start(*color_cancel_button);
   hbuttonbox7->pack_start(*change_button);
   vbox10->set_border_width(3);
   vbox10->pack_start(*change_label, Gtk::PACK_SHRINK, 0);
   vbox10->pack_start(*frame9, Gtk::PACK_SHRINK, 0);
   vbox10->pack_start(*hbuttonbox7);
   color_win->set_title(_("Change Your Color"));
   color_win->set_modal(false);
   color_win->property_window_position().set_value(Gtk::WIN_POS_NONE);
   color_win->set_resizable(true);
   color_win->property_destroy_with_parent().set_value(false);
   color_win->add(*vbox10);
   orange->show();
   yellow->show();
   white->show();
   blue->show();
   purple->show();
   black->show();
   red->show();
   green->show();
   table7->show();
   alignment12->show();
   label29->show();
   frame9->show();
   color_cancel_button->show();
   image14->show();
   label39->show();
   hbox5->show();
   alignment14->show();
   change_button->show();
   hbuttonbox7->show();
   vbox10->show();
   color_cancel_button->signal_clicked().connect(sigc::mem_fun(this, &color_win_glade::on_color_cancel_button_clicked), false);
   change_button->signal_clicked().connect(sigc::mem_fun(this, &color_win_glade::on_change_button_clicked), false);
   change_button->grab_default();
}

color_win_glade::~color_win_glade()
{  delete gmm_data;
}
