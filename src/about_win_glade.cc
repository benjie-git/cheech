// generated 2006/4/13 13:56:32 PDT by benjie@paddy.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/benjie/projects/cheech/cheech.glade
// for gtk 2.8.6 and gtkmm 2.8.0
//
// Please modify the corresponding derived classes in ./src/about_win.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
//#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "about_win_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/label.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/box.h>

about_win_glade::about_win_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{

   Gtk::Window *about_win = this;
   gmm_data = new GlademmData(get_accel_group());

   Gtk::Label *label12 = Gtk::manage(new class Gtk::Label(_("<b>cheech</b> is a multiplatform, networked implementation of the classic game Chinese Checkers.  It allows for some of the most common rule varriations that I've seen used.  I personally think the 'long jumps' rule makes the game infinitely more interesting.  :)\n"
		"\n"
		"http://cheech.sourceforge.net\n"
		"\n"
		"cheech is based on gchch by Loban A Rahman.\n"
		"\n"
		"2005-2006 Ben Levitt")));
   Gtk::Button *close_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-close")));
   Gtk::HButtonBox *hbuttonbox6 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 0));
   Gtk::VBox *vbox9 = Gtk::manage(new class Gtk::VBox(false, 0));
   label12->set_alignment(0.5,0.5);
   label12->set_padding(0,0);
   label12->set_justify(Gtk::JUSTIFY_CENTER);
   label12->set_line_wrap(true);
   label12->set_use_markup(true);
   label12->set_selectable(false);
   close_button->set_flags(Gtk::CAN_FOCUS);
   close_button->set_flags(Gtk::CAN_DEFAULT);
   close_button->set_relief(Gtk::RELIEF_NORMAL);
   hbuttonbox6->set_border_width(6);
   hbuttonbox6->pack_start(*close_button);
   vbox9->pack_start(*label12);
   vbox9->pack_start(*hbuttonbox6, Gtk::PACK_SHRINK, 0);
   about_win->set_title(_("About cheech -- Chinese Checkers"));
   about_win->set_modal(false);
   about_win->property_window_position().set_value(Gtk::WIN_POS_NONE);
   about_win->set_resizable(true);
   about_win->property_destroy_with_parent().set_value(false);
   about_win->add(*vbox9);
   label12->show();
   close_button->show();
   hbuttonbox6->show();
   vbox9->show();
   close_button->signal_clicked().connect(sigc::mem_fun(this, &about_win_glade::on_close_button_clicked), false);
}

about_win_glade::~about_win_glade()
{  delete gmm_data;
}
