// generated 2006/4/13 13:50:00 PDT by benjie@paddy.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/benjie/projects/cheech/cheech.glade
// for gtk 2.8.6 and gtkmm 2.8.0
//
// Please modify the corresponding derived classes in ./src/setup_game_win.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
//#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "setup_game_win_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/label.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/table.h>
#include <gtkmm/box.h>
#include <gtkmm/alignment.h>
#include <gtkmm/frame.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include <gtkmm/buttonbox.h>

setup_game_win_glade::setup_game_win_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{

   Gtk::Window *setup_game_win = this;
   gmm_data = new GlademmData(get_accel_group());

   Gtk::Label *label65 = Gtk::manage(new class Gtk::Label(_("Number of Players:")));
   Gtk::Adjustment *num_players_adj = Gtk::manage(new class Gtk::Adjustment(3, 1, 6, 1, 1, 1));
   num_players = Gtk::manage(new class Gtk::SpinButton(*num_players_adj, 1, 0));

   Gtk::Table *table10 = Gtk::manage(new class Gtk::Table(2, 2, false));
   long_jumps = Gtk::manage(new class Gtk::CheckButton(_("Allow Long Jumps (Sue Wen Rules)")));
   hop_others = Gtk::manage(new class Gtk::CheckButton(_("Allow Hopping Through Other Players' Triangles")));
   stop_others = Gtk::manage(new class Gtk::CheckButton(_("Allow Stopping In Other Players' Triangles")));

   Gtk::VBox *vbox19 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Alignment *alignment23 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 1, 1));
   Gtk::Label *label66 = Gtk::manage(new class Gtk::Label(_("<b>Rules</b>")));
   Gtk::Frame *frame14 = Gtk::manage(new class Gtk::Frame());
   Gtk::Button *cancel_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Image *image25 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-apply"), Gtk::IconSize(4)));
   Gtk::Label *label67 = Gtk::manage(new class Gtk::Label(_("Restart Game")));
   Gtk::HBox *hbox10 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment24 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button5 = Gtk::manage(new class Gtk::Button());
   Gtk::HButtonBox *hbuttonbox13 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 6));
   Gtk::VBox *vbox18 = Gtk::manage(new class Gtk::VBox(false, 0));
   label65->set_alignment(0,0.5);
   label65->set_padding(0,0);
   label65->set_justify(Gtk::JUSTIFY_LEFT);
   label65->set_line_wrap(false);
   label65->set_use_markup(false);
   label65->set_selectable(false);
   num_players->set_flags(Gtk::CAN_FOCUS);
   num_players->set_update_policy(Gtk::UPDATE_ALWAYS);
   num_players->set_numeric(false);
   num_players->set_digits(0);
   num_players->set_wrap(true);
   table10->set_border_width(6);
   table10->set_row_spacings(6);
   table10->set_col_spacings(6);
   table10->attach(*label65, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table10->attach(*num_players, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   long_jumps->set_flags(Gtk::CAN_FOCUS);
   long_jumps->set_relief(Gtk::RELIEF_NORMAL);
   long_jumps->set_mode(true);
   long_jumps->set_active(true);
   hop_others->set_flags(Gtk::CAN_FOCUS);
   hop_others->set_relief(Gtk::RELIEF_NORMAL);
   hop_others->set_mode(true);
   hop_others->set_active(true);
   stop_others->set_flags(Gtk::CAN_FOCUS);
   stop_others->set_relief(Gtk::RELIEF_NORMAL);
   stop_others->set_mode(true);
   stop_others->set_active(true);
   vbox19->pack_start(*long_jumps, Gtk::PACK_SHRINK, 0);
   vbox19->pack_start(*hop_others, Gtk::PACK_SHRINK, 0);
   vbox19->pack_start(*stop_others, Gtk::PACK_SHRINK, 0);
   alignment23->add(*vbox19);
   label66->set_alignment(0.5,0.5);
   label66->set_padding(0,0);
   label66->set_justify(Gtk::JUSTIFY_LEFT);
   label66->set_line_wrap(false);
   label66->set_use_markup(true);
   label66->set_selectable(false);
   frame14->set_border_width(6);
   frame14->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame14->set_label_align(0,0.5);
   frame14->add(*alignment23);
   frame14->set_label_widget(*label66);
   cancel_button->set_flags(Gtk::CAN_FOCUS);
   cancel_button->set_flags(Gtk::CAN_DEFAULT);
   cancel_button->set_relief(Gtk::RELIEF_NORMAL);
   image25->set_alignment(0.5,0.5);
   image25->set_padding(0,0);
   label67->set_alignment(0.5,0.5);
   label67->set_padding(0,0);
   label67->set_justify(Gtk::JUSTIFY_LEFT);
   label67->set_line_wrap(false);
   label67->set_use_markup(false);
   label67->set_selectable(false);
   hbox10->pack_start(*image25, Gtk::PACK_SHRINK, 0);
   hbox10->pack_start(*label67, Gtk::PACK_SHRINK, 0);
   alignment24->add(*hbox10);
   button5->set_flags(Gtk::CAN_FOCUS);
   button5->set_flags(Gtk::CAN_DEFAULT);
   button5->set_relief(Gtk::RELIEF_NORMAL);
   button5->add(*alignment24);
   hbuttonbox13->set_border_width(6);
   hbuttonbox13->pack_start(*cancel_button);
   hbuttonbox13->pack_start(*button5);
   vbox18->pack_start(*table10, Gtk::PACK_SHRINK, 0);
   vbox18->pack_start(*frame14, Gtk::PACK_EXPAND_PADDING, 0);
   vbox18->pack_start(*hbuttonbox13, Gtk::PACK_SHRINK, 0);
   setup_game_win->set_title(_("Game Options"));
   setup_game_win->set_modal(false);
   setup_game_win->property_window_position().set_value(Gtk::WIN_POS_NONE);
   setup_game_win->set_resizable(true);
   setup_game_win->property_destroy_with_parent().set_value(false);
   setup_game_win->add(*vbox18);
   label65->show();
   num_players->show();
   table10->show();
   long_jumps->show();
   hop_others->show();
   stop_others->show();
   vbox19->show();
   alignment23->show();
   label66->show();
   frame14->show();
   cancel_button->show();
   image25->show();
   label67->show();
   hbox10->show();
   alignment24->show();
   button5->show();
   hbuttonbox13->show();
   vbox18->show();
   num_players->signal_activate().connect(sigc::mem_fun(this, &setup_game_win_glade::on_num_players_activate), false);
   cancel_button->signal_clicked().connect(sigc::mem_fun(this, &setup_game_win_glade::on_cancel_button_clicked), false);
   button5->signal_clicked().connect(sigc::mem_fun(this, &setup_game_win_glade::on_ok_button_clicked), false);
   button5->grab_default();
}

setup_game_win_glade::~setup_game_win_glade()
{  delete gmm_data;
}
