<!-- ##### SECTION Title ##### -->
GConnHttp

<!-- ##### SECTION Short_Description ##### -->
HTTP connection object

<!-- ##### SECTION Long_Description ##### -->
<para>
A #GConnHttp represents a HTTP client connection. A #GConnHttp
is created directly by calling gnet_conn_http_new(). After
that set the URI to retrieve using gnet_conn_http_set_uri(). 
A connection is made and the HTTP request sent only once 
either gnet_conn_http_run_async() or gnet_conn_http_run()
is called. Use the asynchroneous variant if you want the
function to return immediately and prefer to receive data
and status information in the background via the callback
function. gnet_conn_http_run_async() assumes that there is
already a GLib main loop running (e.g. the Gtk main loop).
</para>

<para>
You can decide for yourself how much information you would
like to receive during the HTTP operation. All status 
information is communicated to the caller via the optional
callback function.
</para>

<para>
The easiest way to just retrieve some data via HTTP is to
use the convenience function gnet_http_get().
</para>

<para>
Here is a small example how to retrieve a file with the
least amount of effort and error checking (this is 
more or less what gnet_http_get() does internally):
<example>
<title>Simple <structname>GConnHttp</structname> usage.</title>
<programlisting>
&hash;define GNET_EXPERIMENTAL
&hash;include &lt;gnet.h&gt;

void
fetch_and_print_url (const gchar *url)
{
  GConnHttp  *conn;
  
  conn = gnet_conn_http_new();
  
  gnet_conn_http_set_uri(conn, url);
  
  if (gnet_conn_http_run(conn, NULL, NULL))
  {
    gchar *buf;
    gsize  buflen;
    
    if (gnet_conn_http_steal_buffer(conn, &amp;buf, &amp;buflen))
    {
      g_print ("Received %%u bytes of data:\n%%s\n", buflen, buf);
      g_free(buf);
    }
  }
  
  gnet_conn_http_delete(conn);
}

  ...

  fetch_and_print_url ("http://www.google.com");
  
  ...

</programlisting>
</example>
</para>

<para>
#GConnHttp is still considered less mature than other parts of GNet, even
though it should generall work just fine. It just has not received as much
testing as other parts of GNet yet. You should not use it in production
level code without thoroughly testing it for your purposes. Because of that,
you need to define GNET_EXPERIMENTAL in your source code before including the
GNet headers (otherwise you will get compiler errors when trying to use it).
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GConnHttp ##### -->
<para>

</para>


<!-- ##### ENUM GConnHttpMethod ##### -->
<para>

</para>

@GNET_CONN_HTTP_METHOD_GET: 
@GNET_CONN_HTTP_METHOD_POST: 

<!-- ##### ENUM GConnHttpError ##### -->
<para>

</para>

@GNET_CONN_HTTP_ERROR_UNSPECIFIED: 
@GNET_CONN_HTTP_ERROR_PROTOCOL_UNSUPPORTED: 
@GNET_CONN_HTTP_ERROR_HOSTNAME_RESOLUTION: 

<!-- ##### ENUM GConnHttpEventType ##### -->
<para>

</para>

@GNET_CONN_HTTP_RESOLVED: 
@GNET_CONN_HTTP_CONNECTED: 
@GNET_CONN_HTTP_RESPONSE: 
@GNET_CONN_HTTP_REDIRECT: 
@GNET_CONN_HTTP_DATA_PARTIAL: 
@GNET_CONN_HTTP_DATA_COMPLETE: 
@GNET_CONN_HTTP_TIMEOUT: 
@GNET_CONN_HTTP_ERROR: 

<!-- ##### STRUCT GConnHttpEvent ##### -->
<para>

</para>

@type: 

<!-- ##### STRUCT GConnHttpEventResolved ##### -->
<para>

</para>

@ia: 

<!-- ##### STRUCT GConnHttpEventResponse ##### -->
<para>

</para>

@response_code: 
@header_fields: 
@header_values: 

<!-- ##### STRUCT GConnHttpEventRedirect ##### -->
<para>

</para>

@num_redirects: 
@max_redirects: 
@new_location: 
@auto_redirect: 

<!-- ##### STRUCT GConnHttpEventData ##### -->
<para>

</para>

@content_length: 
@data_received: 
@buffer: 
@buffer_length: 

<!-- ##### STRUCT GConnHttpEventError ##### -->
<para>

</para>

@code: 
@message: 

<!-- ##### USER_FUNCTION GConnHttpFunc ##### -->
<para>

</para>

@conn: 
@event: 
@user_data: 


<!-- ##### ENUM GConnHttpHeaderFlags ##### -->
<para>

</para>

@GNET_CONN_HTTP_FLAG_SKIP_HEADER_CHECK: 

<!-- ##### FUNCTION gnet_conn_http_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_uri ##### -->
<para>

</para>

@conn: 
@uri: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_escaped_uri ##### -->
<para>

</para>

@conn: 
@uri: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_header ##### -->
<para>

</para>

@conn: 
@field: 
@value: 
@flags: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_max_redirects ##### -->
<para>

</para>

@conn: 
@num: 


<!-- ##### FUNCTION gnet_conn_http_set_timeout ##### -->
<para>

</para>

@conn: 
@timeout: 


<!-- ##### FUNCTION gnet_conn_http_set_user_agent ##### -->
<para>

</para>

@conn: 
@agent: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_method ##### -->
<para>

</para>

@conn: 
@method: 
@post_data: 
@post_data_len: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_set_main_context ##### -->
<para>

</para>

@conn: 
@context: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_run_async ##### -->
<para>

</para>

@conn: 
@func: 
@user_data: 


<!-- ##### FUNCTION gnet_conn_http_run ##### -->
<para>

</para>

@conn: 
@func: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_steal_buffer ##### -->
<para>

</para>

@conn: 
@buffer: 
@length: 
@Returns: 


<!-- ##### FUNCTION gnet_conn_http_cancel ##### -->
<para>

</para>

@conn: 


<!-- ##### FUNCTION gnet_conn_http_delete ##### -->
<para>

</para>

@conn: 


<!-- ##### FUNCTION gnet_http_get ##### -->
<para>

</para>

@url: 
@buffer: 
@length: 
@response: 
@Returns: 


