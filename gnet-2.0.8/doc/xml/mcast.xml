<refentry id="gnet-mcast">
<refmeta>
<refentrytitle role="top_of_page">Mcast</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNET Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Mcast</refname>
<refpurpose>IP Multicast socket</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gnet.h&gt;


                    <link linkend="GMcastSocket">GMcastSocket</link>;
<link linkend="GMcastSocket">GMcastSocket</link>*       <link linkend="gnet-mcast-socket-new">gnet_mcast_socket_new</link>               (void);
<link linkend="GMcastSocket">GMcastSocket</link>*       <link linkend="gnet-mcast-socket-new-with-port">gnet_mcast_socket_new_with_port</link>     (<link linkend="gint">gint</link> port);
<link linkend="GMcastSocket">GMcastSocket</link>*       <link linkend="gnet-mcast-socket-new-full">gnet_mcast_socket_new_full</link>          (const <link linkend="GInetAddr">GInetAddr</link> *iface,
                                                         <link linkend="gint">gint</link> port);
<link linkend="void">void</link>                <link linkend="gnet-mcast-socket-delete">gnet_mcast_socket_delete</link>            (<link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="void">void</link>                <link linkend="gnet-mcast-socket-ref">gnet_mcast_socket_ref</link>               (<link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="void">void</link>                <link linkend="gnet-mcast-socket-unref">gnet_mcast_socket_unref</link>             (<link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="GIOChannel">GIOChannel</link>*         <link linkend="gnet-mcast-socket-get-io-channel">gnet_mcast_socket_get_io_channel</link>    (<link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="GInetAddr">GInetAddr</link>*          <link linkend="gnet-mcast-socket-get-local-inetaddr">gnet_mcast_socket_get_local_inetaddr</link>
                                                        (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-join-group">gnet_mcast_socket_join_group</link>        (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *inetaddr);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-leave-group">gnet_mcast_socket_leave_group</link>       (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *inetaddr);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-get-ttl">gnet_mcast_socket_get_ttl</link>           (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-set-ttl">gnet_mcast_socket_set_ttl</link>           (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gint">gint</link> ttl);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-send">gnet_mcast_socket_send</link>              (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *dst);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-receive">gnet_mcast_socket_receive</link>           (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         <link linkend="GInetAddr">GInetAddr</link> **src);
<link linkend="gboolean">gboolean</link>            <link linkend="gnet-mcast-socket-has-packet">gnet_mcast_socket_has_packet</link>        (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-is-loopback">gnet_mcast_socket_is_loopback</link>       (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-mcast-socket-set-loopback">gnet_mcast_socket_set_loopback</link>      (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gboolean">gboolean</link> enable);
#define             <link linkend="gnet-mcast-socket-to-udp-socket">gnet_mcast_socket_to_udp_socket</link>     (MS)
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
The Mcast module provides support for IP Multicast sockets.  IP
Multicast allows you to send one packet to many receivers at once.
Unfortunately, IP Multicast is not widely available.  IP Multicast is
built on UDP.
</para>

<para>
An IP Multicast socket is represented by a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> stucture.  To
create a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>, call <link linkend="gnet-mcast-socket-new"><function>gnet_mcast_socket_new()</function></link>,
<link linkend="gnet-mcast-socket-new-with-port"><function>gnet_mcast_socket_new_with_port()</function></link>, or <link linkend="gnet-mcast-socket-new-full"><function>gnet_mcast_socket_new_full()</function></link>.
Then call <link linkend="gnet-mcast-socket-join-group"><function>gnet_mcast_socket_join_group()</function></link> to join a multicast group.
To leave the group, call <link linkend="gnet-mcast-socket-leave-group"><function>gnet_mcast_socket_leave_group()</function></link>.
</para>

<para>
Use <link linkend="gnet-mcast-socket-set-loopback"><function>gnet_mcast_socket_set_loopback()</function></link> to set whether packets sent by
the host will also be received by the host.  Applications typically
disable loopback.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GMcastSocket" role="struct"/>GMcastSocket</title>
<indexterm><primary>GMcastSocket</primary></indexterm><programlisting>typedef struct _GMcastSocket GMcastSocket;</programlisting>
<para>
A <link linkend="GMcastSocket"><type>GMcastSocket</type></link> structure represents a IP Multicast socket.  The
 implementation is hidden.  A <link linkend="GMcastSocket"><type>GMcastSocket</type></link> is child of
 <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.  Use <link linkend="gnet-mcast-socket-to-udp-socket"><function>gnet_mcast_socket_to_udp_socket()</function></link> to safely cast
 a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> to a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-new" role="function"/>gnet_mcast_socket_new ()</title>
<indexterm><primary>gnet_mcast_socket_new</primary></indexterm><programlisting><link linkend="GMcastSocket">GMcastSocket</link>*       gnet_mcast_socket_new               (void);</programlisting>
<para>
Creates a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> bound to all interfaces and an arbitrary
 port.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GMcastSocket"><type>GMcastSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-new-with-port" role="function"/>gnet_mcast_socket_new_with_port ()</title>
<indexterm><primary>gnet_mcast_socket_new_with_port</primary></indexterm><programlisting><link linkend="GMcastSocket">GMcastSocket</link>*       gnet_mcast_socket_new_with_port     (<link linkend="gint">gint</link> port);</programlisting>
<para>
Creates a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> bound to all interfaces and port <parameter>port</parameter>.
 If <parameter>port</parameter> is 0, an arbitrary port will be used.  Use this
 constructor if you know the port of the group you will join.  Most
 applications will use this constructor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> port to bind to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GMcastSocket"><type>GMcastSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-new-full" role="function"/>gnet_mcast_socket_new_full ()</title>
<indexterm><primary>gnet_mcast_socket_new_full</primary></indexterm><programlisting><link linkend="GMcastSocket">GMcastSocket</link>*       gnet_mcast_socket_new_full          (const <link linkend="GInetAddr">GInetAddr</link> *iface,
                                                         <link linkend="gint">gint</link> port);</programlisting>
<para>
Creates a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> bound to interface <parameter>iface</parameter> and port <parameter>port</parameter>.
 If <parameter>iface</parameter> is NULL, all interfaces will be used.  If <parameter>port</parameter> is 0, an
 arbitrary port will be used.  To receive packets from this group,
 call <link linkend="gnet-mcast-socket-join-group"><function>gnet_mcast_socket_join_group()</function></link> next.  Loopback is disabled by
 default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iface</parameter>&nbsp;:</term>
<listitem><simpara> interface to bind to (NULL for all interfaces)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> port to bind to (0 for an arbitrary port)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GMcastSocket"><type>GMcastSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-delete" role="function"/>gnet_mcast_socket_delete ()</title>
<indexterm><primary>gnet_mcast_socket_delete</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_mcast_socket_delete            (<link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Deletes a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>. Does nothing if <parameter>socket</parameter> is NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>, or NULL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-ref" role="function"/>gnet_mcast_socket_ref ()</title>
<indexterm><primary>gnet_mcast_socket_ref</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_mcast_socket_ref               (<link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Adds a reference to a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-unref" role="function"/>gnet_mcast_socket_unref ()</title>
<indexterm><primary>gnet_mcast_socket_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_mcast_socket_unref             (<link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Removes a reference from a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.  A <link linkend="GMcastSocket"><type>GMcastSocket</type></link> is
 deleted when the reference count reaches 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-get-io-channel" role="function"/>gnet_mcast_socket_get_io_channel ()</title>
<indexterm><primary>gnet_mcast_socket_get_io_channel</primary></indexterm><programlisting><link linkend="GIOChannel">GIOChannel</link>*         gnet_mcast_socket_get_io_channel    (<link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Gets the <link linkend="GIOChannel"><type>GIOChannel</type></link> of a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.
</para>
<para>
 Use the channel with <link linkend="g-io-add-watch"><function>g_io_add_watch()</function></link> to check if the socket is
 readable or writable.  If the channel is readable, call
 <link linkend="gnet-mcast-socket-receive"><function>gnet_mcast_socket_receive()</function></link> to receive a packet.  If the channel
 is writable, call <link linkend="gnet-mcast-socket-send"><function>gnet_mcast_socket_send()</function></link> to send a packet.  This
 is not a normal giochannel - do not read from or write to it.
</para>
<para>
 Every <link linkend="GMcastSocket"><type>GMcastSocket</type></link> has one and only one <link linkend="GIOChannel"><type>GIOChannel</type></link>.  If you ref
 the channel, then you must unref it eventually.  Do not close the
 channel.  The channel is closed by GNet when the socket is
 deleted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GIOChannel"><type>GIOChannel</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-get-local-inetaddr" role="function"/>gnet_mcast_socket_get_local_inetaddr ()</title>
<indexterm><primary>gnet_mcast_socket_get_local_inetaddr</primary></indexterm><programlisting><link linkend="GInetAddr">GInetAddr</link>*          gnet_mcast_socket_get_local_inetaddr
                                                        (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Gets the local host's address from a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GInetAddr"><type>GInetAddr</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-join-group" role="function"/>gnet_mcast_socket_join_group ()</title>
<indexterm><primary>gnet_mcast_socket_join_group</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_join_group        (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *inetaddr);</programlisting>
<para>
Joins a multicast group.  Join only one group per socket.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inetaddr</parameter>&nbsp;:</term>
<listitem><simpara> address of the group
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-leave-group" role="function"/>gnet_mcast_socket_leave_group ()</title>
<indexterm><primary>gnet_mcast_socket_leave_group</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_leave_group       (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *inetaddr);</programlisting>
<para>
Leaves a mulitcast group.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inetaddr</parameter>&nbsp;:</term>
<listitem><simpara> address of the group
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-get-ttl" role="function"/>gnet_mcast_socket_get_ttl ()</title>
<indexterm><primary>gnet_mcast_socket_get_ttl</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_get_ttl           (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Gets the multicast time-to-live (TTL) of a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.  All IP
 multicast packets have a TTL field.  This field is decremented by
 a router before it forwards the packet.  If the TTL reaches zero,
 the packet is discarded.  The default value is sufficient for most
 applications.
</para>
<para>
 The table below shows the scope for a given TTL.  The scope is
 only an estimate.
</para>
<para>
 <table>
   <title>TTL and scope</title>
   <tgroup cols="2" align="left">
   <thead>
     <row>
       <entry>TTL</entry>
       <entry>Scope</entry>
     </row>
   </thead>
   <tbody>
     <row>
       <entry>0</entry>
       <entry>node local</entry>
     </row>
     <row>
       <entry>1</entry>
       <entry>link local</entry>
     </row>
     <row>
       <entry>2-32</entry>
       <entry>site local</entry>
     </row>
     <row>
       <entry>33-64</entry>
       <entry>region local</entry>
     </row>
     <row>
       <entry>65-128</entry>
       <entry>continent local</entry>
     </row>
     <row>
       <entry>129-255</entry>
       <entry>unrestricted (global)</entry>
     </row>
   </tbody>
   </tgroup>
 </table></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the TTL (an integer between 0 and 255), -1 if the kernel
 default is being used, or an integer less than -1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-set-ttl" role="function"/>gnet_mcast_socket_set_ttl ()</title>
<indexterm><primary>gnet_mcast_socket_set_ttl</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_set_ttl           (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gint">gint</link> ttl);</programlisting>
<para>
Sets the time-to-live (TTL) default of a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.  Set the TTL
 to -1 to use the kernel default.  The default value is sufficient
 for most applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ttl</parameter>&nbsp;:</term>
<listitem><simpara> value to set TTL to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if successful.  

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-send" role="function"/>gnet_mcast_socket_send ()</title>
<indexterm><primary>gnet_mcast_socket_send</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_send              (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *dst);</programlisting>
<para>
Sends data to a host using a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to send
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara> destination address
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if successful.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-receive" role="function"/>gnet_mcast_socket_receive ()</title>
<indexterm><primary>gnet_mcast_socket_receive</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_receive           (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         <link linkend="GInetAddr">GInetAddr</link> **src);</programlisting>
<para>
Receives data using a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.  If <parameter>src</parameter> is set, the source
 address is stored in the location <parameter>src</parameter> points to.  The address is
 caller owned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to write to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> pointer to source address (optional)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of bytes received, -1 if unsuccessful.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-has-packet" role="function"/>gnet_mcast_socket_has_packet ()</title>
<indexterm><primary>gnet_mcast_socket_has_packet</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnet_mcast_socket_has_packet        (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Tests if a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> has a packet waiting to be received.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if there is packet waiting, FALSE otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-is-loopback" role="function"/>gnet_mcast_socket_is_loopback ()</title>
<indexterm><primary>gnet_mcast_socket_is_loopback</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_is_loopback       (const <link linkend="GMcastSocket">GMcastSocket</link> *socket);</programlisting>
<para>
Checks if a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> has loopback enabled.  If loopback is
 enabled, all packets sent by the host will also be received by the
 host.  Loopback is disabled by default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if loopback is disabled, 1 if enabled, and -1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-set-loopback" role="function"/>gnet_mcast_socket_set_loopback ()</title>
<indexterm><primary>gnet_mcast_socket_set_loopback</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_mcast_socket_set_loopback      (<link linkend="GMcastSocket">GMcastSocket</link> *socket,
                                                         <link linkend="gboolean">gboolean</link> enable);</programlisting>
<para>
Enables (or disables) loopback on a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>.  Loopback is
 disabled by default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>enable</parameter>&nbsp;:</term>
<listitem><simpara> should loopback be enabled?
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if successful.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-mcast-socket-to-udp-socket" role="macro"/>gnet_mcast_socket_to_udp_socket()</title>
<indexterm><primary>gnet_mcast_socket_to_udp_socket</primary></indexterm><programlisting>#define gnet_mcast_socket_to_udp_socket(MS) ((GUdpSocket*) (MS))
</programlisting>
<para>
Converts a <link linkend="GMcastSocket"><type>GMcastSocket</type></link> to a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.  A <link linkend="GMcastSocket"><type>GMcastSocket</type></link> is a
 child of <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>MS</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GMcastSocket"><type>GMcastSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
