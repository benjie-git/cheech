<refentry id="gnet-sha">
<refmeta>
<refentrytitle role="top_of_page">SHA</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNET Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SHA</refname>
<refpurpose>SHA hash</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gnet.h&gt;


                    <link linkend="GSHA:CAPS">GSHA</link>;
#define             <link linkend="GNET-SHA-HASH-LENGTH:CAPS">GNET_SHA_HASH_LENGTH</link>
<link linkend="GSHA:CAPS">GSHA</link>*               <link linkend="gnet-sha-new">gnet_sha_new</link>                        (const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="guint">guint</link> length);
<link linkend="GSHA:CAPS">GSHA</link>*               <link linkend="gnet-sha-new-string">gnet_sha_new_string</link>                 (const <link linkend="gchar">gchar</link> *str);
<link linkend="GSHA:CAPS">GSHA</link>*               <link linkend="gnet-sha-clone">gnet_sha_clone</link>                      (const <link linkend="GSHA:CAPS">GSHA</link> *sha);
<link linkend="void">void</link>                <link linkend="gnet-sha-delete">gnet_sha_delete</link>                     (<link linkend="GSHA:CAPS">GSHA</link> *sha);
<link linkend="GSHA:CAPS">GSHA</link>*               <link linkend="gnet-sha-new-incremental">gnet_sha_new_incremental</link>            (void);
<link linkend="void">void</link>                <link linkend="gnet-sha-update">gnet_sha_update</link>                     (<link linkend="GSHA:CAPS">GSHA</link> *sha,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="guint">guint</link> length);
<link linkend="void">void</link>                <link linkend="gnet-sha-final">gnet_sha_final</link>                      (<link linkend="GSHA:CAPS">GSHA</link> *sha);
<link linkend="gboolean">gboolean</link>            <link linkend="gnet-sha-equal">gnet_sha_equal</link>                      (<link linkend="gconstpointer">gconstpointer</link> p1,
                                                         <link linkend="gconstpointer">gconstpointer</link> p2);
<link linkend="guint">guint</link>               <link linkend="gnet-sha-hash">gnet_sha_hash</link>                       (<link linkend="gconstpointer">gconstpointer</link> p);
<link linkend="gchar">gchar</link>*              <link linkend="gnet-sha-get-digest">gnet_sha_get_digest</link>                 (const <link linkend="GSHA:CAPS">GSHA</link> *sha);
<link linkend="gchar">gchar</link>*              <link linkend="gnet-sha-get-string">gnet_sha_get_string</link>                 (const <link linkend="GSHA:CAPS">GSHA</link> *sha);
<link linkend="void">void</link>                <link linkend="gnet-sha-copy-string">gnet_sha_copy_string</link>                (const <link linkend="GSHA:CAPS">GSHA</link> *sha,
                                                         <link linkend="gchar">gchar</link> *buffer);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
The SHA module provide support for computing and manipulating SHA
hashes.  SHA is a hash function with a very low probability of
collision.  SHA is considered stronger than MD5.
</para>

<para>
A SHA can be calculated at one time or incrementally.  To create a SHA
at one time, call <link linkend="gnet-sha-new"><function>gnet_sha_new()</function></link> with the data.  To create a SHA
incrementally, call <link linkend="gnet-sha-new-incremental"><function>gnet_sha_new_incremental()</function></link> to create the SHA
object, then <link linkend="gnet-sha-update"><function>gnet_sha_update()</function></link> one or more times with data to hash,
and finally call <link linkend="gnet-sha-final"><function>gnet_sha_final()</function></link>.
</para>

<para>
To get the digest, or hash value, call <link linkend="gnet-sha-get-digest"><function>gnet_sha_get_digest()</function></link>.  This
returns the raw digest as an array of <link linkend="GNET-SHA-HASH-LENGTH:CAPS"><literal>GNET_SHA_HASH_LENGTH</literal></link> bytes.  To
get the digest as a human-readable string, call <link linkend="gnet-sha-get-string"><function>gnet_sha_get_string()</function></link>
or <link linkend="gnet-sha-copy-string"><function>gnet_sha_copy_string()</function></link>.
</para>

<para>
<informalexample>
<programlisting>
gchar buffer[] = "Hello world!";
gchar buffer2[] = "Second line";
GSHA*  sha;
gchar* sha_str;

&comstart; Compute an SHA at one time &comend;
sha = gnet_sha_new (buffer, strlen(buffer));

sha_str = gnet_sha_get_string (sha);
g_print ("The SHA of %s is %s\n", buffer, sha_str);

&comstart; Use SHA... &comend;

g_free (sha_str);
gnet_sha_delete (sha);

&comstart; Compute an SHA incrementally &comend;
sha = gnet_sha_new_incremental ();
gnet_sha_update (sha, buffer, strlen(buffer));
gnet_sha_update (sha, buffer2, strlen(buffer2));
gnet_sha_final (sha);

&comstart; Use SHA... &comend;

gnet_sha_delete (sha);
</programlisting>
</informalexample>
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GSHA:CAPS" role="struct"/>GSHA</title>
<indexterm><primary>GSHA</primary></indexterm><programlisting>typedef struct _GSHA GSHA;</programlisting>
<para>
GSHA is a SHA hash.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNET-SHA-HASH-LENGTH:CAPS" role="macro"/>GNET_SHA_HASH_LENGTH</title>
<indexterm><primary>GNET_SHA_HASH_LENGTH</primary></indexterm><programlisting>#define GNET_SHA_HASH_LENGTH	20
</programlisting>
<para>
Length of the SHA hash in bytes.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnet-sha-new" role="function"/>gnet_sha_new ()</title>
<indexterm><primary>gnet_sha_new</primary></indexterm><programlisting><link linkend="GSHA:CAPS">GSHA</link>*               gnet_sha_new                        (const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="guint">guint</link> length);</programlisting>
<para>
Creates a <link linkend="GSHA:CAPS"><type>GSHA</type></link> from <parameter>buffer</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GSHA:CAPS"><type>GSHA</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-new-string" role="function"/>gnet_sha_new_string ()</title>
<indexterm><primary>gnet_sha_new_string</primary></indexterm><programlisting><link linkend="GSHA:CAPS">GSHA</link>*               gnet_sha_new_string                 (const <link linkend="gchar">gchar</link> *str);</programlisting>
<para>
Createss a <link linkend="GSHA:CAPS"><type>GSHA</type></link> from <parameter>str</parameter>.  <parameter>str</parameter> is a hexidecimal string
 representing the digest.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> hexidecimal string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GSHA:CAPS"><type>GSHA</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-clone" role="function"/>gnet_sha_clone ()</title>
<indexterm><primary>gnet_sha_clone</primary></indexterm><programlisting><link linkend="GSHA:CAPS">GSHA</link>*               gnet_sha_clone                      (const <link linkend="GSHA:CAPS">GSHA</link> *sha);</programlisting>
<para>
Copies a <link linkend="GSHA:CAPS"><type>GSHA</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a copy of <parameter>sha</parameter>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-delete" role="function"/>gnet_sha_delete ()</title>
<indexterm><primary>gnet_sha_delete</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_sha_delete                     (<link linkend="GSHA:CAPS">GSHA</link> *sha);</programlisting>
<para>
Deletes a <link linkend="GSHA:CAPS"><type>GSHA</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-new-incremental" role="function"/>gnet_sha_new_incremental ()</title>
<indexterm><primary>gnet_sha_new_incremental</primary></indexterm><programlisting><link linkend="GSHA:CAPS">GSHA</link>*               gnet_sha_new_incremental            (void);</programlisting>
<para>
Creates a <link linkend="GSHA:CAPS"><type>GSHA</type></link> incrementally.  After creating a <link linkend="GSHA:CAPS"><type>GSHA</type></link>, call
 <link linkend="gnet-sha-update"><function>gnet_sha_update()</function></link> one or more times to hash data.  Finally, call
 <link linkend="gnet-sha-final"><function>gnet_sha_final()</function></link> to compute the final hash value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GSHA:CAPS"><type>GSHA</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-update" role="function"/>gnet_sha_update ()</title>
<indexterm><primary>gnet_sha_update</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_sha_update                     (<link linkend="GSHA:CAPS">GSHA</link> *sha,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="guint">guint</link> length);</programlisting>
<para>
Updates the hash with <parameter>buffer</parameter>.  This may be called several times
 on a hash created by <link linkend="gnet-sha-new-incremental"><function>gnet_sha_new_incremental()</function></link> before being
 finalized by calling <link linkend="gnet-sha-final"><function>gnet_sha_final()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to add
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-final" role="function"/>gnet_sha_final ()</title>
<indexterm><primary>gnet_sha_final</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_sha_final                      (<link linkend="GSHA:CAPS">GSHA</link> *sha);</programlisting>
<para>
Calcuates the final hash value of a <link linkend="GSHA:CAPS"><type>GSHA</type></link>.  This should only be
 called on a <link linkend="GSHA:CAPS"><type>GSHA</type></link> created by <link linkend="gnet-sha-new-incremental"><function>gnet_sha_new_incremental()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-equal" role="function"/>gnet_sha_equal ()</title>
<indexterm><primary>gnet_sha_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnet_sha_equal                      (<link linkend="gconstpointer">gconstpointer</link> p1,
                                                         <link linkend="gconstpointer">gconstpointer</link> p2);</programlisting>
<para>
Compares two <link linkend="GSHA:CAPS"><type>GSHA</type></link>'s for equality.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p1</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p2</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="GSHA:CAPS"><type>GSHA</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if they are equal; FALSE otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-hash" role="function"/>gnet_sha_hash ()</title>
<indexterm><primary>gnet_sha_hash</primary></indexterm><programlisting><link linkend="guint">guint</link>               gnet_sha_hash                       (<link linkend="gconstpointer">gconstpointer</link> p);</programlisting>
<para>
Creates a hash code for a <link linkend="GMD5:CAPS"><type>GMD5</type></link> for use with GHashTable.  This
 hash value is not the same as the MD5 digest.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the hash code for <parameter>p</parameter>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-get-digest" role="function"/>gnet_sha_get_digest ()</title>
<indexterm><primary>gnet_sha_get_digest</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gnet_sha_get_digest                 (const <link linkend="GSHA:CAPS">GSHA</link> *sha);</programlisting>
<para>
Gets the raw SHA digest.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a callee-owned buffer containing the SHA hash digest.
 The buffer is <link linkend="GNET-SHA-HASH-LENGTH:CAPS"><literal>GNET_SHA_HASH_LENGTH</literal></link> bytes long.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-get-string" role="function"/>gnet_sha_get_string ()</title>
<indexterm><primary>gnet_sha_get_string</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gnet_sha_get_string                 (const <link linkend="GSHA:CAPS">GSHA</link> *sha);</programlisting>
<para>
Get the digest represented a human-readable string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a hexadecimal string representing the digest.  The string
 is 2 * <link linkend="GNET-SHA-HASH-LENGTH:CAPS"><literal>GNET_SHA_HASH_LENGTH</literal></link> bytes long and NULL terminated.  The
 string is caller owned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-sha-copy-string" role="function"/>gnet_sha_copy_string ()</title>
<indexterm><primary>gnet_sha_copy_string</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_sha_copy_string                (const <link linkend="GSHA:CAPS">GSHA</link> *sha,
                                                         <link linkend="gchar">gchar</link> *buffer);</programlisting>
<para>
Copies the digest, represented as a string, into <parameter>buffer</parameter>.  The
string is not NULL terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sha</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSHA:CAPS"><type>GSHA</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer at least 2 * <link linkend="GNET-SHA-HASH-LENGTH:CAPS"><literal>GNET_SHA_HASH_LENGTH</literal></link> bytes long
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
