<refentry id="gnet-udp">
<refmeta>
<refentrytitle role="top_of_page">UDP</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNET Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>UDP</refname>
<refpurpose>UDP socket</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gnet.h&gt;


                    <link linkend="GUdpSocket">GUdpSocket</link>;
<link linkend="GUdpSocket">GUdpSocket</link>*         <link linkend="gnet-udp-socket-new">gnet_udp_socket_new</link>                 (void);
<link linkend="GUdpSocket">GUdpSocket</link>*         <link linkend="gnet-udp-socket-new-with-port">gnet_udp_socket_new_with_port</link>       (<link linkend="gint">gint</link> port);
<link linkend="GUdpSocket">GUdpSocket</link>*         <link linkend="gnet-udp-socket-new-full">gnet_udp_socket_new_full</link>            (const <link linkend="GInetAddr">GInetAddr</link> *iface,
                                                         <link linkend="gint">gint</link> port);
<link linkend="void">void</link>                <link linkend="gnet-udp-socket-delete">gnet_udp_socket_delete</link>              (<link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="void">void</link>                <link linkend="gnet-udp-socket-ref">gnet_udp_socket_ref</link>                 (<link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="void">void</link>                <link linkend="gnet-udp-socket-unref">gnet_udp_socket_unref</link>               (<link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-udp-socket-send">gnet_udp_socket_send</link>                (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *dst);
<link linkend="gint">gint</link>                <link linkend="gnet-udp-socket-receive">gnet_udp_socket_receive</link>             (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         <link linkend="GInetAddr">GInetAddr</link> **src);
<link linkend="gboolean">gboolean</link>            <link linkend="gnet-udp-socket-has-packet">gnet_udp_socket_has_packet</link>          (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="GIOChannel">GIOChannel</link>*         <link linkend="gnet-udp-socket-get-io-channel">gnet_udp_socket_get_io_channel</link>      (<link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="GInetAddr">GInetAddr</link>*          <link linkend="gnet-udp-socket-get-local-inetaddr">gnet_udp_socket_get_local_inetaddr</link>  (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-udp-socket-get-ttl">gnet_udp_socket_get_ttl</link>             (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);
<link linkend="gint">gint</link>                <link linkend="gnet-udp-socket-set-ttl">gnet_udp_socket_set_ttl</link>             (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         <link linkend="gint">gint</link> ttl);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
This module provides support for UDP sockets.  UDP is an internet
protocol that transfers packets by best-effort delivery.  Packets may
be lost or arrive out-of-order.  Use TCP if your protocol requires
data transfered reliably and in-order -- most do.
</para>

<para>
A UDP socket is represented by a <link linkend="GUdpSocket"><type>GUdpSocket</type></link> structure.  To create a
<link linkend="GUdpSocket"><type>GUdpSocket</type></link>, call <link linkend="gnet-udp-socket-new"><function>gnet_udp_socket_new()</function></link>,
<link linkend="gnet-udp-socket-new-with-port"><function>gnet_udp_socket_new_with_port()</function></link>, or <link linkend="gnet-udp-socket-new-full"><function>gnet_udp_socket_new_full()</function></link>.
</para>

<para>
To send a packet, call <link linkend="gnet-udp-socket-send"><function>gnet_udp_socket_send()</function></link>.  To receive a packet,
call <link linkend="gnet-udp-socket-receive"><function>gnet_udp_socket_receive()</function></link>.  <link linkend="gnet-udp-socket-send"><function>gnet_udp_socket_send()</function></link> will block if
the OS cannot buffer the packet immediately.
<link linkend="gnet-udp-socket-receive"><function>gnet_udp_socket_receive()</function></link> will block until there is a packet available
to receive.  Call <link linkend="gnet-udp-socket-has-packet"><function>gnet_udp_socket_has_packet()</function></link> to determine whether a
packet is available immediately.  A more elegant method is to get the
<link linkend="GIOChannel"><type>GIOChannel</type></link> and add a read watch.  A callback will be called when a
packet is available.  Note that a UDP socket's <link linkend="GIOChannel"><type>GIOChannel</type></link> is not a
normal <link linkend="GIOChannel"><type>GIOChannel</type></link> -- it should not be written to or read from
directly.
</para>

<para>
Packets have a time-to-live (TTL) field.  This field is decremented
before a router forwards the packet.  If the TTL reaches zero, the
packet is dropped.  The TTL can be set by calling
<link linkend="gnet-udp-socket-get-ttl"><function>gnet_udp_socket_get_ttl()</function></link>.  The default value is sufficient for most
applications.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="GUdpSocket" role="struct"/>GUdpSocket</title>
<indexterm><primary>GUdpSocket</primary></indexterm><programlisting>typedef struct _GUdpSocket GUdpSocket;</programlisting>
<para>
A <link linkend="GUdpSocket"><type>GUdpSocket</type></link> structure represents a UDP socket.  The
 implementation is hidden.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-new" role="function"/>gnet_udp_socket_new ()</title>
<indexterm><primary>gnet_udp_socket_new</primary></indexterm><programlisting><link linkend="GUdpSocket">GUdpSocket</link>*         gnet_udp_socket_new                 (void);</programlisting>
<para>
Creates a <link linkend="GUdpSocket"><type>GUdpSocket</type></link> bound to all interfaces and an arbitrary
 port.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GUdpSocket"><type>GUdpSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-new-with-port" role="function"/>gnet_udp_socket_new_with_port ()</title>
<indexterm><primary>gnet_udp_socket_new_with_port</primary></indexterm><programlisting><link linkend="GUdpSocket">GUdpSocket</link>*         gnet_udp_socket_new_with_port       (<link linkend="gint">gint</link> port);</programlisting>
<para>
Creates a <link linkend="GUdpSocket"><type>GUdpSocket</type></link> bound to all interfaces and port <parameter>port</parameter>.  If
 <parameter>port</parameter> is 0, an arbitrary port will be used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> port to bind to (0 for an arbitrary port)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GUdpSocket"><type>GUdpSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-new-full" role="function"/>gnet_udp_socket_new_full ()</title>
<indexterm><primary>gnet_udp_socket_new_full</primary></indexterm><programlisting><link linkend="GUdpSocket">GUdpSocket</link>*         gnet_udp_socket_new_full            (const <link linkend="GInetAddr">GInetAddr</link> *iface,
                                                         <link linkend="gint">gint</link> port);</programlisting>
<para>
Creates a <link linkend="GUdpSocket"><type>GUdpSocket</type></link> bound to interface <parameter>iface</parameter> and port <parameter>port</parameter>.
 If <parameter>iface</parameter> is NULL, all interfaces will be used.  If <parameter>port</parameter> is 0, an
 arbitrary port will be used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iface</parameter>&nbsp;:</term>
<listitem><simpara> interface to bind to (NULL for all interfaces)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> port to bind to (0 for an arbitrary port)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="GUdpSocket"><type>GUdpSocket</type></link>; NULL on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-delete" role="function"/>gnet_udp_socket_delete ()</title>
<indexterm><primary>gnet_udp_socket_delete</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_udp_socket_delete              (<link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Deletes a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>. Does nothing if <parameter>socket</parameter> is NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>, or NULL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-ref" role="function"/>gnet_udp_socket_ref ()</title>
<indexterm><primary>gnet_udp_socket_ref</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_udp_socket_ref                 (<link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Adds a reference to a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="GUdpSocket"><type>GUdpSocket</type></link> to reference
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-unref" role="function"/>gnet_udp_socket_unref ()</title>
<indexterm><primary>gnet_udp_socket_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gnet_udp_socket_unref               (<link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Removes a reference from a <link linkend="GUdpScoket"><type>GUdpScoket</type></link>.  A <link linkend="GUdpSocket"><type>GUdpSocket</type></link> is deleted
 when the reference count reaches 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-send" role="function"/>gnet_udp_socket_send ()</title>
<indexterm><primary>gnet_udp_socket_send</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_udp_socket_send                (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         const <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         const <link linkend="GInetAddr">GInetAddr</link> *dst);</programlisting>
<para>
Sends data to a host using a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to send
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara> destination address
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if successful; something else on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-receive" role="function"/>gnet_udp_socket_receive ()</title>
<indexterm><primary>gnet_udp_socket_receive</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_udp_socket_receive             (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint">gint</link> length,
                                                         <link linkend="GInetAddr">GInetAddr</link> **src);</programlisting>
<para>
Receives data using a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.  If <parameter>src</parameter> is set, the source
 address is stored in the location <parameter>src</parameter> points to.  The address is
 caller owned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to write to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> pointer to source address (optional)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of bytes received, -1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-has-packet" role="function"/>gnet_udp_socket_has_packet ()</title>
<indexterm><primary>gnet_udp_socket_has_packet</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnet_udp_socket_has_packet          (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Tests if a <link linkend="GUdpSocket"><type>GUdpSocket</type></link> has a packet waiting to be received.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if there is packet waiting, FALSE otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-get-io-channel" role="function"/>gnet_udp_socket_get_io_channel ()</title>
<indexterm><primary>gnet_udp_socket_get_io_channel</primary></indexterm><programlisting><link linkend="GIOChannel">GIOChannel</link>*         gnet_udp_socket_get_io_channel      (<link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Gets the <link linkend="GIOChannel"><type>GIOChannel</type></link> of a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.
</para>
<para>
 Use the channel with <link linkend="g-io-add-watch"><function>g_io_add_watch()</function></link> to check if the socket is
 readable or writable.  If the channel is readable, call
 <link linkend="gnet-udp-socket-receive"><function>gnet_udp_socket_receive()</function></link> to receive a packet.  If the channel is
 writable, call <link linkend="gnet-udp-socket-send"><function>gnet_udp_socket_send()</function></link> to send a packet.  This is
 not a normal giochannel - do not read from or write to it.
</para>
<para>
 Every <link linkend="GUdpSocket"><type>GUdpSocket</type></link> has one and only one <link linkend="GIOChannel"><type>GIOChannel</type></link>.  If you ref
 the channel, then you must unref it eventually.  Do not close the
 channel.  The channel is closed by GNet when the socket is
 deleted.
</para>
<para>
 Before deleting the UDP socket, make sure to remove any watches you have
 added with <link linkend="g-io-add-watch"><function>g_io_add_watch()</function></link> again with <link linkend="g-source-remove"><function>g_source_remove()</function></link> using the integer
 id returned by <link linkend="g-io-add-watch"><function>g_io_add_watch()</function></link>. You may find your program stuck in a busy
 loop at 100% CPU utilisation if you forget to do this.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GIOChannel"><type>GIOChannel</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-get-local-inetaddr" role="function"/>gnet_udp_socket_get_local_inetaddr ()</title>
<indexterm><primary>gnet_udp_socket_get_local_inetaddr</primary></indexterm><programlisting><link linkend="GInetAddr">GInetAddr</link>*          gnet_udp_socket_get_local_inetaddr  (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Gets the local host's address from a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GInetAddr"><type>GInetAddr</type></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-get-ttl" role="function"/>gnet_udp_socket_get_ttl ()</title>
<indexterm><primary>gnet_udp_socket_get_ttl</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_udp_socket_get_ttl             (const <link linkend="GUdpSocket">GUdpSocket</link> *socket);</programlisting>
<para>
Gets the time-to-live (TTL) default of a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.  All UDP
 packets have a TTL field.  This field is decremented by a router
 before it forwards the packet.  If the TTL reaches zero, the
 packet is discarded.  The default value is sufficient for most
 applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the TTL (an integer between 0 and 255), -1 if the kernel
 default is being used, or an integer less than -1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnet-udp-socket-set-ttl" role="function"/>gnet_udp_socket_set_ttl ()</title>
<indexterm><primary>gnet_udp_socket_set_ttl</primary></indexterm><programlisting><link linkend="gint">gint</link>                gnet_udp_socket_set_ttl             (<link linkend="GUdpSocket">GUdpSocket</link> *socket,
                                                         <link linkend="gint">gint</link> ttl);</programlisting>
<para>
Sets the time-to-live (TTL) default of a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>.  Set the TTL
 to -1 to use the kernel default.  The default value is sufficient
 for most applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>socket</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GUdpSocket"><type>GUdpSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ttl</parameter>&nbsp;:</term>
<listitem><simpara> value to set TTL to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if successful.

</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
